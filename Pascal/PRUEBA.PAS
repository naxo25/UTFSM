PROGRAM XPERTO;
USES CRT;

TYPE
    REG_PROGRAMACION = RECORD
                 FECHA :BYTE;
                 COD_LOCAL:STRING[2];
                 GOL_LOCAL:BYTE;
                 COD_VISITA:STRING[2];
                 GOL_VISITA:BYTE;
                 ESTADO:CHAR;
                 END;

    REG_EQUIPOS = RECORD
            COD_EQUIPO:STRING[2];
            NOM_EQUIPO:STRING[40];
            PARTIDOS_JUGADOS:BYTE;
            PARTIDOS_GANADOS:BYTE;
            PARTIDOS_EMPATADOS:BYTE;
            PARTIDOS_PERDIDOS:BYTE;
            GOLES_A_FAVOR:BYTE;
            GOLES_EN_CONTRA:BYTE;
            END;

VAR ARCH:TEXT;
    BUFFER:STRING;
    ESTADO:CHAR;
    COD:STRING[2];
    FECHA:BYTE;
    COD_LOCAL:STRING[2];
    GOL_LOCAL:BYTE;
    COD_VISITA:STRING[2];
    GOL_VISITA:BYTE;
    PROGR:FILE OF REG_PROGRAMACION;
    BFPROGR:REG_PROGRAMACION;
    EQUIPOS:FILE OF REG_EQUIPOS;
    BFEQUIPOS:REG_EQUIPOS;
    X:INTEGER;

PROCEDURE ACTUALIZAR_GOLES;
VAR POSICION,CONT:INTEGER;
BEGIN
     POSICION:=-1;
     CONT:=-1;
     RESET(PROGR);
     WHILE (NOT EOF(PROGR)) AND (POSICION=-1) DO
     BEGIN
          CONT:=CONT+1;
          READ(PROGR,BFPROGR);
          IF BFPROGR.COD_LOCAL=COD_LOCAL THEN
             POSICION:=CONT;
     END;
     CLOSE(PROGR);
     RESET(PROGR);
     IF POSICION>-1 THEN
     BEGIN
          SEEK(PROGR,POSICION);
          BFPROGR.FECHA:=FECHA;
          BFPROGR.COD_LOCAL:=COD_LOCAL;
          BFPROGR.GOL_LOCAL:=GOL_LOCAL;
          BFPROGR.COD_VISITA:=COD_VISITA;
          BFPROGR.GOL_VISITA:=GOL_VISITA;
          IF COD_LOCAL>COD_VISITA THEN
             ESTADO:='L'
             ELSE IF COD_LOCAL<COD_VISITA THEN
                  ESTADO:='V'
                  ELSE ESTADO:='E';
          WRITE(PROGR,BFPROGR);
     END;
     CLOSE(PROGR);
END;

PROCEDURE CREAR_EQUIPOS_1;
VAR POSICION,CONT:INTEGER;
BEGIN
     POSICION:=-1;
     CONT:=-1;
     RESET(EQUIPOS);
     WHILE (NOT EOF(EQUIPOS)) AND (POSICION=-1) DO
     BEGIN
          CONT:=CONT+1;
          READ(EQUIPOS,BFEQUIPOS);
          IF BFEQUIPOS.COD_EQUIPO=COD_LOCAL THEN
             POSICION:=CONT;
     END;
     IF POSICION>-1 THEN
     BEGIN
            SEEK(EQUIPOS,POSICION);
            BFEQUIPOS.PARTIDOS_JUGADOS:=BFEQUIPOS.PARTIDOS_JUGADOS+1;
            BFEQUIPOS.COD_EQUIPO:=COD_LOCAL;
            IF BFEQUIPOS.COD_EQUIPO=COD_LOCAL THEN
            BEGIN
            BFEQUIPOS.GOLES_A_FAVOR:=BFEQUIPOS.GOLES_A_FAVOR+GOL_LOCAL;
            BFEQUIPOS.GOLES_EN_CONTRA:=BFEQUIPOS.GOLES_EN_CONTRA+GOL_VISITA;
            IF ESTADO='L' THEN
               BFEQUIPOS.PARTIDOS_GANADOS:=BFEQUIPOS.PARTIDOS_GANADOS+1;
            IF ESTADO='V' THEN
               BFEQUIPOS.PARTIDOS_PERDIDOS:=BFEQUIPOS.PARTIDOS_PERDIDOS+1;
            IF ESTADO='E' THEN
               BFEQUIPOS.PARTIDOS_EMPATADOS:=BFEQUIPOS.PARTIDOS_EMPATADOS+1;
            END;
            IF BFEQUIPOS.COD_EQUIPO=COD_VISITA THEN
            BEGIN
            BFEQUIPOS.GOLES_A_FAVOR:=BFEQUIPOS.GOLES_A_FAVOR+GOL_VISITA;
            BFEQUIPOS.GOLES_EN_CONTRA:=BFEQUIPOS.GOLES_EN_CONTRA+GOL_LOCAL;
            IF ESTADO='V' THEN
               BFEQUIPOS.PARTIDOS_GANADOS:=BFEQUIPOS.PARTIDOS_GANADOS+1;
            IF ESTADO='L' THEN
               BFEQUIPOS.PARTIDOS_PERDIDOS:=BFEQUIPOS.PARTIDOS_PERDIDOS+1;
            IF ESTADO='E' THEN
               BFEQUIPOS.PARTIDOS_EMPATADOS:=BFEQUIPOS.PARTIDOS_EMPATADOS+1;
            END;
            WRITE(EQUIPOS,BFEQUIPOS);
     END;
     CLOSE(EQUIPOS);
END;

PROCEDURE CREAR_EQUIPOS_2;
VAR POSICION,CONT:INTEGER;
BEGIN
     POSICION:=-1;
     CONT:=-1;
     RESET(EQUIPOS);
     WHILE (NOT EOF(EQUIPOS)) AND (POSICION=-1) DO
     BEGIN
          CONT:=CONT+1;
          READ(EQUIPOS,BFEQUIPOS);
          IF BFEQUIPOS.COD_EQUIPO=COD_VISITA THEN
             POSICION:=CONT;
     END;
     IF POSICION>-1 THEN
     BEGIN
            SEEK(EQUIPOS,POSICION);
            BFEQUIPOS.PARTIDOS_JUGADOS:=BFEQUIPOS.PARTIDOS_JUGADOS+1;
            BFEQUIPOS.COD_EQUIPO:=COD_VISITA;
            IF BFEQUIPOS.COD_EQUIPO=COD_LOCAL THEN
            BEGIN
            BFEQUIPOS.GOLES_A_FAVOR:=BFEQUIPOS.GOLES_A_FAVOR+GOL_LOCAL;
            BFEQUIPOS.GOLES_EN_CONTRA:=BFEQUIPOS.GOLES_EN_CONTRA+GOL_VISITA;
            IF ESTADO='L' THEN
               BFEQUIPOS.PARTIDOS_GANADOS:=BFEQUIPOS.PARTIDOS_GANADOS+1;
            IF ESTADO='V' THEN
               BFEQUIPOS.PARTIDOS_PERDIDOS:=BFEQUIPOS.PARTIDOS_PERDIDOS+1;
            IF ESTADO='E' THEN
               BFEQUIPOS.PARTIDOS_EMPATADOS:=BFEQUIPOS.PARTIDOS_EMPATADOS+1;
            END;
            IF BFEQUIPOS.COD_EQUIPO=COD_VISITA THEN
            BEGIN
            BFEQUIPOS.GOLES_A_FAVOR:=BFEQUIPOS.GOLES_A_FAVOR+GOL_VISITA;
            BFEQUIPOS.GOLES_EN_CONTRA:=BFEQUIPOS.GOLES_EN_CONTRA+GOL_LOCAL;
            IF ESTADO='V' THEN
               BFEQUIPOS.PARTIDOS_GANADOS:=BFEQUIPOS.PARTIDOS_GANADOS+1;
            IF ESTADO='L' THEN
               BFEQUIPOS.PARTIDOS_PERDIDOS:=BFEQUIPOS.PARTIDOS_PERDIDOS+1;
            IF ESTADO='E' THEN
               BFEQUIPOS.PARTIDOS_EMPATADOS:=BFEQUIPOS.PARTIDOS_EMPATADOS+1;
            END;
            WRITE(EQUIPOS,BFEQUIPOS);
     END;
     CLOSE(EQUIPOS);
END;

BEGIN
CLRSCR;
       ASSIGN(ARCH,'RESUL.TXT');
       ASSIGN(PROGR,'PROGRAMA.DAT');
       ASSIGN(EQUIPOS,'EQUIPOS.DAT');
       RESET(ARCH);
       WHILE NOT EOF(ARCH) DO
       BEGIN
          READLN(ARCH,BUFFER);
          VAL(BUFFER[1],FECHA,X);
          COD_LOCAL:=BUFFER[3]+BUFFER[4];
          VAL(BUFFER[6],GOL_LOCAL,X);
          COD_VISITA:=BUFFER[8]+BUFFER[9];
          VAL(BUFFER[11],GOL_VISITA,X);
          ACTUALIZAR_GOLES;
          CREAR_EQUIPOS_1;
          CREAR_EQUIPOS_2;
       END;
     CLOSE(ARCH);
     RESET(PROGR);
     WHILE NOT EOF (PROGR) DO
     BEGIN
          READ(PROGR,BFPROGR);
          WRITELN(BFPROGR.COD_LOCAL,BFPROGR.GOL_LOCAL,BFPROGR.GOL_VISITA);
          {PREFERI MOSTRAR DATOS DEL PROGRAMA DAT}
     END;
     CLOSE(PROGR);
     READLN;
END.